CREATE TABLE IF NOT EXISTS employees (
    employee_id SERIAL PRIMARY KEY,
    -- Unique identifier for each employee
    employee_name VARCHAR(100) NOT NULL,
    -- Name of the employee
    role VARCHAR(50) NOT NULL CHECK (role IN ('Manager', 'Employee')),
    -- The role of the employee (Manager or Employee)
    manager_id INTEGER REFERENCES employees(employee_id)
    -- Foreign key linking to the manager (self-referencing)
);

-- Table to store performance goals
CREATE TABLE IF NOT EXISTS goals (
    goal_id SERIAL PRIMARY KEY,
    -- Unique identifier for each goal
    employee_id INTEGER REFERENCES employees(employee_id),
    -- Foreign key linking to the employee assigned the goal
    description TEXT NOT NULL,
    -- Detailed description of the goal
    due_date DATE NOT NULL,
    -- The target completion date
    status VARCHAR(50) NOT NULL CHECK (status IN ('Draft', 'In Progress', 'Completed', 'Cancelled')),
    -- The current status of the goal
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    -- The timestamp when the goal was created
);

-- Table to store tasks for each goal
CREATE TABLE IF NOT EXISTS tasks (
    task_id SERIAL PRIMARY KEY,
    -- Unique identifier for each task
    goal_id INTEGER REFERENCES goals(goal_id) ON DELETE CASCADE,
    -- Foreign key linking to the parent goal
    employee_id INTEGER REFERENCES employees(employee_id),
    -- Foreign key linking to the employee who owns the task
    description TEXT NOT NULL,
    -- Description of the task
    is_approved BOOLEAN DEFAULT FALSE,
    -- Whether the task has been approved by the manager
    completed BOOLEAN DEFAULT FALSE,
    -- Whether the task has been completed
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    -- The timestamp when the task was created
    completed_at TIMESTAMP WITH TIME ZONE
    -- The timestamp when the task was completed
);

-- Table to store manager feedback
CREATE TABLE IF NOT EXISTS feedback (
    feedback_id SERIAL PRIMARY KEY,
    -- Unique identifier for each feedback entry
    goal_id INTEGER REFERENCES goals(goal_id) ON DELETE CASCADE,
    -- Foreign key linking to the goal the feedback is for
    manager_id INTEGER REFERENCES employees(employee_id),
    -- Foreign key linking to the manager who provided the feedback
    employee_id INTEGER REFERENCES employees(employee_id),
    -- Foreign key linking to the employee who received the feedback
    feedback_text TEXT NOT NULL,
    -- The content of the feedback
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    -- The timestamp when the feedback was created
);
